[["intro.html", "A Guide on Data Analysis Chapter 1 Introduction", " A Guide on Data Analysis Mike Nguyen 2020-11-11 Chapter 1 Introduction This guide is an attempt to streamline and demystify the data analysis process. By no mean this is an ultimate guide, or I am a great source of knowledge, or I claim myself as a statistician/data analyst/econometrician (or any fancy name we have now), but I am a strong proponent of learning by teaching. Hence, this is more like a learning experience for both you and me. Since the beginning of the century, we have been bombarded with amazing advancements and inventions, especially in the field of statistics, information technology, and computer science. However, I believe the downside of this introduction is that we use big and trendy words too often (i.e., big data, machine learning, deep learning). Its all fun and exciting when I learned these new tools. But I have to admit that I hardly retain any of these new inventions.However, writing down from the beginning till the end of a data analysis process is the solution that I came up with. Accordingly, lets dive right in. The more you practice, more line of codes that you write, more function that you memorize, I think the more you will like this journey. "],["descriptive-stat.html", "Chapter 2 Descriptive Statistics", " Chapter 2 Descriptive Statistics When you have an area of interest that you to research, a problem that you want to solve, a relationship that you want to investigate, theoretical and empirical processes will help you. (Farjam and Hongyi 2015) References "],["regression-analysis.html", "Chapter 3 Regression Analysis 3.1 Linear Regression 3.2 Generalized Least Squares 3.3 Non-linear Regression", " Chapter 3 Regression Analysis 3.1 Linear Regression 3.1.1 Ordinary Least Squares The most fundamental model in statistics or econometric is a OLS linear regression. 3.1.2 Weighted Least Squares 3.2 Generalized Least Squares 3.3 Non-linear Regression "],["experimental-design.html", "Chapter 4 Experimental Design 4.1 Analysis of Variance (ANOVA)", " Chapter 4 Experimental Design 4.1 Analysis of Variance (ANOVA) ANOVA is using the same underlying mechanism as linear regression. However, the angle that ANOVA chooses to look at is slight different from the traditional linear regression. It can be more useful in the case with qualitative variables and designed experiments. Experimental Design - Factor: explanatory or predictor variable to be studied in an investigation - Treatment (or Factor Level): value of a factor applied to the experimental unit - Experimental Unit: person, animal, piece of material, etc. that is subjected to treatment(s) and provides a response - Single Factor Experiment: one explanatory variable considered - Multifactor Experiment: more than one explanatory variable - Classification Factor: A factor that is not under the control of the experimenter (observational data) - Experimental Factor: assigned by the experimenter Basics of experimental design: - Choices that a statistician has to make: - set of treatments - set of experimental units - treatment assignment (selection bias) - measurement (measurement bias, blind experiments) - Advancements in experimental design: 1. Factorial Experiments: consider multiple factors at the same time (interaction) "],["advanced-methods.html", "Chapter 5 Advanced Methods 5.1 Imputation (Missing Data) 5.2 Deep Learning", " Chapter 5 Advanced Methods 5.1 Imputation (Missing Data) 5.2 Deep Learning 5.2.1 Overview This section is based on (Allaire 2018) * What is deep learning? Input to output via layers of representation What are layers? A layer is a geometric transformation function on the data that goes through it Weights determine the data transformation behavior of a layer Learning Representation * Transforming input data into useful representation The deep in deep learning * multiple layers * Other possibly more appropriate names for the field: + Layered representations learning + Hierarchical representations learning + Chained geometric transformation learning New problem domains for R: - Computer vision - Computer speech recognition - Reinforcement learning applications How do we train deep learning models? * Basic of machine learning algorithms * Machine learning vs. statistical modeling * MNIST example | - Model definition in R | - Layers of representation * The training loop Machine learning algorithms Learning model parameters via exposure to many example data points Statistics: Often focused on inferring the process by which data is generated Machine Learning: Principally focused on predicting future data Deep learning frontiers * Computer vision * Natural language processing * Time series * Biomedical 5.2.2 Tensor Flow and R TensorFlow APIs * Keras API * Estimator API * Core API R packages TensorFlow APIs * keras - Interface for neural networks, with a focus on enabling fast experimentation. * tfestimators - Implementations of common model types such as regressors and classifiers. * tensorflow - Low-level interface to the TensorFlow computational graph. * tfdatasets - Scalable input pipelines for TensorFlow models. Supporting Tools * tfruns - Track , visualize, and manage TensorFlow training runs and experiments * tfdeploy - Tools designed to make exporting and serving TensorFlow models straightforward. * cloudml - R interface to Google Cloud Machine Learning Engine. R interface to Keras * Step-by-step example * Keras layers * Compiling models * Losses, optimizer, and metrics * More examples 5.2.2.1 Keras layers 65 layers available * Dense layers: classic fully connected neural network layers * Convolutional layers: \"Filters for learning local patterns in data * Recurrent layers: Layers that maintain state based on on previously seen data * Embedding layers: Vectorization of text that reflects semantic relationships between words 5.2.3 Compiling models Model compilation prepares the model for training by: 1. Converting the layers into a TensorFlow graph 2. Applying the specified loss function and optimizer 3. Arranging for the collection of metrics during training 5.2.4 Losses, Optimizers, and metrics All available at Keras for R cheatsheet Example ofImage classificaiton References "],["bookdown-cheat-sheet.html", "Chapter 6 Bookdown cheat sheet 6.1 Heading blah blah 6.2 About labelling things 6.3 Cross-references 6.4 Figures, tables, citations 6.5 How the square bracket links work", " Chapter 6 Bookdown cheat sheet Took from professor Jenny to Heres where I park little examples for myself about bookdown mechanics that I keep forgetting. The bookdown book: https://bookdown.org/yihui/bookdown/ 6.1 Heading blah blah 6.2 About labelling things You can label chapter and section titles using {#label} after them, e.g., we can reference Section 6.2. If you do not manually label them, there will be automatic labels anyway, e.g., this reference to the unlabelled heading 6.1 uses the automatically generated label \\@ref(heading-blah-blah). 6.3 Cross-references Add an explicit label by adding {#label} to the end of the section header. If you know youre going to refer to something, this is probably a good idea. To refer to in a chapter- or section-number-y way, use \\@ref(label). \\@ref(install-git) example: In chapter 1 If you are happy with the section header as the link text, use it inside a single set of square brackets: [A picture is worth a thousand words]: example A picture is worth a thousand words via [A picture is worth a thousand words] There are two ways to specify custom link text: [link text][Section header text], e.g., pic = 1000 words via [pic = 1000 words][A picture is worth a thousand words] [link text](#label), e.g., RStudio, meet Git via RStudio, meet Git The Pandoc documentation provides more details on automatic section IDs and implicit header references. 6.4 Figures, tables, citations Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 6.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 6.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 6.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 6.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2020) in this sample book, which was built on top of R Markdown and knitr (???). 6.5 How the square bracket links work Context: you prefer to link with text, not a chapter or section number. GOOD! Heres a link to [Contributors]. BAD. You can see contributors in ??. Facts and vocabulary Each chapter is a file. These files should begin with the chapter title using a level-one header, e.g., # Chapter Title. A chapter can be made up of sections, indicated by lower-level headers, e.g., ## A section within the chapter. There are three ways to address a section when creating links within your book: Explicit identifier: In # My header {#foo} the explicit identifier is foo. Automatically generated identifier: my-header is the auto-identifier for # My header. Pandoc creates auto-identifiers according to rules laid out in Extension: auto_identifiers. The header text, e.g., My header be used verbatim as an implicit header reference. See Extension: implicit_header_references for more. All 3 forms can be used to create cross-references but you build the links differently. Advantage of explicit identification: You are less likely to update the section header and then forget to make matching edits to references elsewhere in the book. How to make text-based links using explicit identifiers, automatic identifiers, and implicit references: Use implicit reference alone to get a link where the text is exactly the section header: [Introduce yourself to Git] [Introduce yourself to Git] [Success and operating systems] [Success and operating systems] You can provide custom text for the link with all 3 methods of addressing a section: Implicit header reference: [link text][Recommended Git clients] [link text][Recommended Git clients] Explicit identifier: [hello git! I'm Jenny](#hello-git) hello git! Im Jenny Automatic identifier: [Any text you want](#recommended-git-clients) Any text you want References "],["references.html", "References", " References "],["appendix.html", "Chapter 7 Appendix 7.1 Short-cut 7.2 Function short-cut", " Chapter 7 Appendix 7.1 Short-cut These are shortcuts that you probably you remember when working with R. Even though it might take a bit of time to learn and use them as your second nature, but they will save you a lot of time. Just like learning another language, the more you speak and practice it, the more comfortable you are speaking it. function short-cut navigate folders in console \" \" + tab pull up short-cut cheat sheet ctrl + shift + k go to file/function (everything in your project) ctrl + . search everything cmd + shift + f navigate between tabs Crtl + shift + . type function faster snip + shift + tab type faster use tab for fuzzy match cmd + up ctrl + . 7.2 Function short-cut apply one function to your data to create a new variable: mutate(mod=map(data,function)) instead of using i in 1:length(object): for (i in seq_along(object)) apply multiple function: map_dbl apply multiple function to multiple variables:map2 "]]
